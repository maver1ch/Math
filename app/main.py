import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streamlit as st
from app.components.chat_interface import render_chat_interface
from app.components.knowledge_gaps import render_knowledge_gaps
from app.utils.session_manager import init_session_state, reset_session
from config.app_config import APP_TITLE, APP_DESCRIPTION
from core.tier1_input_processor.intent_classifier import classify_intent
from core.tier1_input_processor.ocr_processor import process_image
from core.tier2_solver.problem_classifier import classify_problem
from core.tier2_solver.solver_selector import select_solver
from core.tier3_dialogue_manager.dialogue_manager import DialogueManager
from core.tier3_dialogue_manager.knowledge_analyzer import KnowledgeAnalyzer

def main():
    # Thi·∫øt l·∫≠p trang
    st.set_page_config(
        page_title=APP_TITLE,
        page_icon="üßÆ",
        layout="wide"
    )
    
    # Kh·ªüi t·∫°o session state
    init_session_state()
    
    # Ti√™u ƒë·ªÅ
    st.title(APP_TITLE)
    
    # Sidebar v·ªõi th√¥ng tin
    with st.sidebar:
        st.header("Th√¥ng tin")
        st.info(APP_DESCRIPTION)
        
        # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu b√†i to√°n m·ªõi
        if st.button("B√†i to√°n m·ªõi", use_container_width=True):
            reset_session()
            st.rerun()
        
        # Hi·ªÉn th·ªã th√¥ng tin phi√™n b·∫£n
        st.markdown("---")
        st.caption("Math Mentor AI - Phi√™n b·∫£n 0.1.0")
    
    # Khu v·ª±c Chat ch√≠nh
    st.subheader("H√£y ƒë·∫∑t c√¢u h·ªèi to√°n h·ªçc c·ªßa b·∫°n")
    
    # X·ª≠ l√Ω ph√¢n t√≠ch l·ªó h·ªïng ki·∫øn th·ª©c n·∫øu b√†i to√°n ƒë√£ ho√†n th√†nh
    if st.session_state.get("dialogue_completed", False) and not st.session_state.get("knowledge_analysis"):
        with st.spinner("ƒêang ph√¢n t√≠ch l·ªó h·ªïng ki·∫øn th·ª©c..."):
            # T·∫°o knowledge analyzer
            analyzer = KnowledgeAnalyzer()
            
            # Ph√¢n t√≠ch l·ªó h·ªïng ki·∫øn th·ª©c
            knowledge_analysis = analyzer.analyze(
                st.session_state.solution_json,
                st.session_state.dialogue_manager.conversation_history
            )
            
            # L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch
            st.session_state.knowledge_analysis = knowledge_analysis
    
    # Hi·ªÉn th·ªã ph√¢n t√≠ch l·ªó h·ªïng ki·∫øn th·ª©c n·∫øu c√≥
    if st.session_state.get("knowledge_analysis"):
        render_knowledge_gaps(st.session_state.knowledge_analysis)
    
    # X·ª≠ l√Ω tr·∫°ng th√°i h·ªôi tho·∫°i
    if "dialogue_manager" in st.session_state and not st.session_state.get("dialogue_completed", False):
        # L·∫•y g·ª£i √Ω ƒë·∫ßu ti√™n n·∫øu ch∆∞a c√≥
        if "first_hint_generated" not in st.session_state:
            with st.spinner("ƒêang chu·∫©n b·ªã g·ª£i √Ω..."):
                first_hint = st.session_state.dialogue_manager.generate_hint()
                st.session_state.first_hint_generated = True
                # Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠ ·ª©ng d·ª•ng (kh√¥ng ph·∫£i l·ªãch s·ª≠ c·ªßa dialogue_manager)
                if "messages" not in st.session_state:
                    st.session_state.messages = []
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": first_hint
                })
    
    # Render giao di·ªán chat t√≠ch h·ª£p
    uploaded_file, user_input = render_chat_interface()
    
    # X·ª≠ l√Ω ƒë·∫ßu v√†o
    if not st.session_state.get("dialogue_manager"):
        # Ch∆∞a c√≥ dialogue_manager, x·ª≠ l√Ω ƒë·∫ßu v√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu b√†i to√°n
        if (uploaded_file or user_input) and not st.session_state.get("processing", False):
            # ƒê√°nh d·∫•u ƒëang x·ª≠ l√Ω
            st.session_state.processing = True
            
            # X·ª≠ l√Ω OCR n·∫øu c√≥ ·∫£nh
            if uploaded_file:
                with st.spinner("ƒêang tr√≠ch xu·∫•t ƒë·ªÅ b√†i t·ª´ ·∫£nh..."):
                    try:
                        extracted_text = process_image(uploaded_file)
                        st.session_state.ocr_result = extracted_text
                        
                        # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω h√¨nh ·∫£nh
                        st.session_state.image_processed = True
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ OCR
                        with st.chat_message("assistant"):
                            st.markdown(f"**ƒê·ªÅ b√†i t·ª´ ·∫£nh:**\n\n{extracted_text}")
                        
                        # Th√™m k·∫øt qu·∫£ OCR v√†o l·ªãch s·ª≠
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": f"**ƒê·ªÅ b√†i t·ª´ ·∫£nh:**\n\n{extracted_text}"
                        })
                        
                    except Exception as e:
                        error_message = f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}"
                        st.error(error_message)
                        
                        # Th√™m th√¥ng b√°o l·ªói v√†o l·ªãch s·ª≠
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": error_message
                        })
            
            # X·ª≠ l√Ω text input (ho·∫∑c k·∫øt qu·∫£ OCR)
            text_to_process = user_input if user_input else st.session_state.ocr_result
            
            if text_to_process:
                # Ph√¢n lo·∫°i √Ω ƒë·ªãnh
                with st.spinner("ƒêang ph√¢n t√≠ch y√™u c·∫ßu..."):
                    intent = classify_intent(text_to_process)
                    
                    # X·ª≠ l√Ω d·ª±a tr√™n √Ω ƒë·ªãnh
                    if intent == "math":
                        # L∆∞u ƒë·ªÅ b√†i
                        st.session_state.problem_text = text_to_process
                        
                        # Ph√¢n lo·∫°i ƒë·ªô kh√≥
                        with st.spinner("ƒêang ph√¢n t√≠ch ƒë·ªô kh√≥ c·ªßa b√†i to√°n..."):
                            difficulty = classify_problem(text_to_process)
                            st.session_state.difficulty = difficulty
                        
                        # Ch·ªçn solver ph√π h·ª£p
                        solver = select_solver(difficulty)
                        
                        # Gi·∫£i b√†i to√°n
                        with st.spinner("ƒêang gi·∫£i b√†i to√°n..."):
                            solution_json = solver.solve(text_to_process)
                            st.session_state.solution_json = solution_json
                        
                        # T·∫°o dialogue manager
                        st.session_state.dialogue_manager = DialogueManager(solution_json)
                        
                        # Hi·ªÉn th·ªã th√¥ng b√°o ƒë√£ s·∫µn s√†ng gi·∫£i
                        with st.chat_message("assistant"):
                            st.markdown(
                                f"T√¥i ƒë√£ ph√¢n t√≠ch b√†i to√°n c·ªßa b·∫°n. "
                                f"H√£y c√πng gi·∫£i n√≥ t·ª´ng b∆∞·ªõc m·ªôt nh√©!"
                            )
                        
                        # Th√™m th√¥ng b√°o v√†o l·ªãch s·ª≠
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": f"T√¥i ƒë√£ ph√¢n t√≠ch b√†i to√°n c·ªßa b·∫°n. "
                            f"H√£y c√πng gi·∫£i n√≥ t·ª´ng b∆∞·ªõc m·ªôt nh√©!"
                        })
                    else:
                        # T·ª´ ch·ªëi y√™u c·∫ßu kh√¥ng li√™n quan ƒë·∫øn to√°n h·ªçc
                        with st.chat_message("assistant"):
                            st.markdown(
                                "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ to√°n h·ªçc. "
                                "Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi li√™n quan ƒë·∫øn to√°n h·ªçc ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n."
                            )
                        
                        # Th√™m t·ª´ ch·ªëi v√†o l·ªãch s·ª≠
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ to√°n h·ªçc. "
                            "Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi li√™n quan ƒë·∫øn to√°n h·ªçc ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n."
                        })
            
            # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω xong
            st.session_state.processing = False
            
            # Refresh trang ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ m·ªõi
            st.rerun()
    else:
        # ƒê√£ c√≥ dialogue_manager, x·ª≠ l√Ω h·ªôi tho·∫°i v·ªõi h·ªçc sinh
        if user_input and not st.session_state.get("processing", False):
            # ƒê√°nh d·∫•u ƒëang x·ª≠ l√Ω
            st.session_state.processing = True
            
            # X·ª≠ l√Ω c√¢u tr·∫£ l·ªùi c·ªßa h·ªçc sinh
            with st.spinner("ƒêang ƒë√°nh gi√° c√¢u tr·∫£ l·ªùi..."):
                response = st.session_state.dialogue_manager.evaluate_answer(user_input)
                
                # Hi·ªÉn th·ªã ph·∫£n h·ªìi
                with st.chat_message("assistant"):
                    st.markdown(response)
                
                # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": response
                })
                
                # Ki·ªÉm tra n·∫øu ƒë√£ ho√†n th√†nh b√†i to√°n
                if st.session_state.dialogue_manager.is_completed():
                    st.session_state.dialogue_completed = True
                    
                    # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
                    with st.success("üéâ B√†i to√°n ƒë√£ ƒë∆∞·ª£c gi·∫£i xong!"):
                        st.markdown(
                            "ƒêang ph√¢n t√≠ch l·ªó h·ªïng ki·∫øn th·ª©c..."
                        )
            
            # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω xong
            st.session_state.processing = False
            
            # Refresh trang ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ m·ªõi
            st.rerun()
    
    # Footer
    st.markdown("---")
    st.caption("¬© 2025 Math Mentor AI - Tr·ª£ l√Ω to√°n h·ªçc th√¥ng minh")

if __name__ == "__main__":
    main()